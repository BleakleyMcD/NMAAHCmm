#!/usr/bin/env bash

#set Great Migration appointment variables
#

CONFIG="Y"
CONFIG_VERSION="1.0"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/nmaahcmmfunctions" || { echo "Missing '${SCRIPTDIR}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
RUNPASHUA="Y"

#if [[ "$(uname -s)" = "Darwin" ]] ; then
#    RUNPASHUA="Y"
#fi

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "  -t set configuration file using the CLI"
    exit
}

# local variables
# REQUIRED_VARIABLES=("OUTDIR_INGESTFILE" "OUTDIR_INGESTXDCAM" "OUTDIR_PAPER" "AIP_STORAGE" "PODCASTDELIVER" "YOUTUBEDELIVER" "TMPDIR" "REGEX4PODCAST" "DVDLABELPREFIX" "OMNEONIP" "OMNEONPATH" "CUSTOM_LOG_DIR" "LTO_INDEX_DIR" "LOCAL_MM_DIR" "EMAIL_FROM" "MAKEYOUTUBE_DELIVERY_EMAIL_TO" "MAKEBROADCAST_DELIVERY_EMAIL_TO" "FILE_MAKER_DB" "VOLADJUST" "PREMIS_DB" "SQL_ERROR_EMAIL_TO" "PREMIS_PROFILE" "PREMIS_NAME" "PERCEPTUAL_HASH")

OPTIND=1

while getopts ":F:abth" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}" ;;
        a) RUNPASHUA="Y" ;;
        t) RUNPASHUA="N" ;;
        h) _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
    esac
done

#_config_edit(){
#    [ -z "${1}" -o -z "${2}" ] && { _report -w "The config_edit function requires two arguments. Error." ; exit ;};
#    SEDTEMP=$(_maketemp)
#    sed "s:^${1}=[^ ]*:$1=$2:" "${GM_CONFIG_FILE}" > "${SEDTEMP}"
#    cp "${SEDTEMP}" "${GM_CONFIG_FILE}"
#}

#_test_config(){
#    for DIRECTORYVARIABLE in OUTDIR_INGESTFILE OUTDIR_INGESTXDCAM OUTDIR_PAPER AIP_STORAGE PODCASTDELIVER YOUTUBEDELIVER TMPDIR CUSTOM_LOG_DIR LTO_INDEX_DIR ; do
#        if [ ! -d "${!DIRECTORYVARIABLE}" ] ; then
#            _report -w "${DIRECTORYVARIABLE} is NOT a valid directory"
#        fi
#    done
#    for BOOLEANVARIABLE in VOLADJUST ; do
#        if [[ ! "${!BOOLEANVARIABLE}" = "Y" && ! "${!BOOLEANVARIABLE}" = "N" ]] ; then
#            _report -w "${BOOLEANVARIABLE} is NOT set to Y or N"
#        fi
#    done
#}

#_add_key(){
#    KEY_TO_ADD="${1}"
#    grep -q "^${KEY_TO_ADD}=" "${GM_CONFIG_FILE}" ; GREP_CODE="$?"
#    if [[ ! "${GREP_CODE}" -eq "0" ]] ; then
#        _report -td "Adding NEW variable ${KEY_TO_ADD} to ${GM_CONFIG_FILE}"
#        echo "${KEY_TO_ADD}=" >> "${GM_CONFIG_FILE}"
#    fi
#}

CONF="
# Set transparency: 0 is transparent, 1 is opaque
*.transparency=1.00
*.x = 250
*.y = 250

# Set window title
*.title = Great Migration config file

# intro text
intro.x = 20
intro.y = 620
intro.width = 500
intro.type = text
intro.text = Set up GMconfig variables

# ask GM_DIR
GM_DIR.x = 20
GM_DIR.y = 570
GM_DIR.type = openbrowser
GM_DIR.label = Please navigate to and select the Great Migration directory to save to:
GM_DIR.width = 270
GM_DIR.default = ${GM_DIR}

#GM_FORMATS
GM_FORMATS.text = Please choose the formats for this Great Migration appointment:
GM_FORMATS.type = text
GM_FORMATS.x = 20
GM_FORMATS.y = 520

#GM_FORMATS_VHS
GM_FORMATS_VHS.x = 60
GM_FORMATS_VHS.y = 500
GM_FORMATS_VHS.type = checkbox
GM_FORMATS_VHS.label = VHS
GM_FORMATS_VHS.tooltip = If activated this creates a VHS directory with ACCESS and PRESERVATION folders.
GM_FORMATS_VHS.default = ${GM_FORMATS_VHS}

#GM_FORMATS_MiniDV
GM_FORMATS_MiniDV.x = 60
GM_FORMATS_MiniDV.y = 480
GM_FORMATS_MiniDV.type = checkbox
GM_FORMATS_MiniDV.label = MiniDV
GM_FORMATS_MiniDV.tooltip = If activated this creates a MiniDV directory with ACCESS and PRESERVATION folders.
GM_FORMATS_MiniDV.default = ${GM_FORMATS_MiniDV}

#GM_FORMATS_Umatic
GM_FORMATS_Umatic.x = 60
GM_FORMATS_Umatic.y = 460
GM_FORMATS_Umatic.type = checkbox
GM_FORMATS_Umatic.label = U-matic
GM_FORMATS_Umatic.tooltip = If activated this creates a Umatic directory with ACCESS and PRESERVATION folders.
GM_FORMATS_Umatic.default = ${GM_FORMATS_Umatic}

#GM_FORMATS_S8
GM_FORMATS_S8.x = 60
GM_FORMATS_S8.y = 440
GM_FORMATS_S8.type = checkbox
GM_FORMATS_S8.label = Super 8
GM_FORMATS_S8.tooltip = If activated this creates a Super8 directory with ACCESS and PRESERVATION folders.
GM_FORMATS_S8.default = ${GM_FORMATS_S8}

#GM_FORMATS_R8
GM_FORMATS_R8.x = 60
GM_FORMATS_R8.y = 420
GM_FORMATS_R8.type = checkbox
GM_FORMATS_R8.label = Regular 8
GM_FORMATS_R8.tooltip = If activated this creates a Regular8mm directory with ACCESS and PRESERVATION folders.
GM_FORMATS_R8.default = ${GM_FORMATS_R8}

#GM_FORMATS_16mm
GM_FORMATS_16mm.x = 60
GM_FORMATS_16mm.y = 400
GM_FORMATS_16mm.type = checkbox
GM_FORMATS_16mm.label = 16mm
GM_FORMATS_16mm.tooltip = If activated this creates a 16mm directory with ACCESS and PRESERVATION folders.
GM_FORMATS_16mm.default = ${GM_FORMATS_16mm}

#GM_FORMATS_AudioCassette
GM_FORMATS_AudioCassette.x = 60
GM_FORMATS_AudioCassette.y = 380
GM_FORMATS_AudioCassette.type = checkbox
GM_FORMATS_AudioCassette.label = Audio Cassette
GM_FORMATS_AudioCassette.tooltip = If activated this creates an AudioCassette directory with ACCESS and PRESERVATION folders.
GM_FORMATS_AudioCassette.default = ${GM_FORMATS_AudioCassette}

#GM_FORMATS_QuarterInchOpenReelAudio
GM_FORMATS_QuarterInchOpenReelAudio.x = 60
GM_FORMATS_QuarterInchOpenReelAudio.y = 360
GM_FORMATS_QuarterInchOpenReelAudio.type = checkbox
GM_FORMATS_QuarterInchOpenReelAudio.label = 1/4 Open Reel Audio
GM_FORMATS_QuarterInchOpenReelAudio.tooltip = If activated this creates a QuarteInchOpenReelAudio directory with ACCESS and PRESERVATION folders.
GM_FORMATS_QuarterInchOpenReelAudio.default = ${GM_FORMATS_QuarterInchOpenReelAudio}

#GM_PROFILE_LAST
GM_PROFILE_LAST.x = 20
GM_PROFILE_LAST.y = 200
GM_PROFILE_LAST.type = textfield
GM_PROFILE_LAST.label = Enter last name of Great Migration appointment:
GM_PROFILE_LAST.option = Y
GM_PROFILE_LAST.option = N
GM_PROFILE_LAST.width = 125
GM_PROFILE_LAST.default = ${GM_PROFILE_LAST}

#GM_PROFILE_FIRST
GM_PROFILE_FIRST.x = 20
GM_PROFILE_FIRST.y = 150
GM_PROFILE_FIRST.type = textfield
GM_PROFILE_FIRST.label = Enter first name of Great Migration appointment:
GM_PROFILE_FIRST.option = Y
GM_PROFILE_FIRST.option = N
GM_PROFILE_FIRST.width = 125
GM_PROFILE_FIRST.default = ${GM_PROFILE_FIRST}

# VOLADJUST
# VOLADJUST.x = 600
# VOLADJUST.y = 80
# VOLADJUST.type = radiobutton
# VOLADJUST.label = Please choose either Y or N to test and adjust volume during transcoding:
# VOLADJUST.option = Y
# VOLADJUST.option = N
# VOLADJUST.width = 75
# VOLADJUST.default = ${VOLADJUST}

# Add a cancel button with default label
cb.type=cancelbutton

";

# if a config file does not exist, create one using this GUI
if [[ "${RUNPASHUA}" = "Y" ]] ; then
    PASHUA_CONFIGFILE=$(/usr/bin/mktemp /tmp/pashua_XXXXXXXXX)
    echo "${CONF}" > "${PASHUA_CONFIGFILE}"
    _pashua_run
    rm "${PASHUA_CONFIGFILE}"
    if [ "${PASHUAFAIL}" = "Y" ] ; then
    	echo "Pashua is not installed. Exiting."
        #echo "Pashua is not installed.  Opening via CLI."
        #sleep 1
        #exec $(basename "${0}") -t
   		exit
    fi
    #write to the config file
    {
        echo "GM_DIR=\"${GM_DIR}\""
        echo "GM_FORMATS_VHS=\"${GM_FORMATS_VHS}\""
        echo "GM_FORMATS_MiniDV=\"${GM_FORMATS_MiniDV}\""
        echo "GM_FORMATS_Umatic=\"${GM_FORMATS_Umatic}\""
        echo "GM_FORMATS_S8=\"${GM_FORMATS_S8}\""
        echo "GM_FORMATS_R8=\"${GM_FORMATS_R8}\""
        echo "GM_FORMATS_16mm=\"${GM_FORMATS_16mm}\""
        echo "GM_FORMATS_AudioCassette=\"${GM_FORMATS_AudioCassette}\""
        echo "GM_FORMATS_QuarterInchOpenReelAudio=\"${GM_FORMATS_QuarterInchOpenReelAudio}\""
        echo "GM_PROFILE_LAST=\"${GM_PROFILE_LAST}\""
        echo "GM_PROFILE_FIRST=\"${GM_PROFILE_FIRST}\""

    } > "${GM_CONFIG_FILE}"
else
    # set up configuration file using the command line
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        _add_key "${KEY}"
    done

    _report -d "(basename "${0}")"
    _report -d "Set system variables for ${WHAT_IS_THIS}"
    echo
    _report -d "Notes:"
    _report -d "VOLADJUST must be set to 'Y' or 'N'"
    echo
    _report -d "Testing ${GM_CONFIG_FILE} validity"
    _test_config
    echo

    _report -d "Table of existing variables:"
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        VALUE=$(grep "^${KEY}=" "${GM_CONFIG_FILE}" | cut -d= -f2)
        printf '\t%-40s %-40s\n' "${KEY}" "${VALUE}"
    done
    while true ; do
        EDITOPTION1="Edit config file in nano"
        EDITOPTION2="Edit config file in TextMate"
        _report -q "Edit a variable? "
        PS3="Selection (enter by number)? "
        select CONFIG_KEY in "${EDITOPTION1}" "${EDITOPTION2}" "${REQUIRED_VARIABLES[@]}" "Quit" ; do
            break
        done
        [ "${CONFIG_KEY}" = "Quit" ] && { echo Goodbye. ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION1}" ] && { nano "${GM_CONFIG_FILE}" ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION2}" ] && { mate "${GM_CONFIG_FILE}" ; exit 1 ;};
        echo -n "Enter the value for ${CONFIG_KEY}: "
        read -e "CONFIG_VALUE"
        echo "${CONFIG_KEY} is now set to ${CONFIG_VALUE}"
        _config_edit "${CONFIG_KEY}" "${CONFIG_VALUE}"
    done

fi
