#!/usr/bin/env bash

#set Great Migration appointment variables

CONFIG="Y"
CONFIG_VERSION="1.0"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/nmaahcmmfunctions" || { echo "Missing '${SCRIPTDIR}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
RUNPASHUA="Y"
if [ ! -d  /Volumes/ScanSAN ] ; then
  echo
  printf "%s/Volumes/ScanSAN is not found. This location must be present for script to run. Exiting.%s" "$bired" "$color_off"
  echo
  echo
  exit
fi

GM_CONFIG_FILE="${SCRIPTDIR}/gm.conf"

#if [[ "$(uname -s)" = "Darwin" ]] ; then
#    RUNPASHUA="Y"
#fi

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This application will set Great Migration appointment variables."
    echo "Usage: $(basename ${0}) [ options ]"
    echo "  -t set configuration file using the CLI"
    echo "  -a set configuration file using a Pashua GUI (default, will happen without specifying this option)"
    echo "  -h display this help"
    exit
}

# local variables
REQUIRED_VARIABLES=("${gm_dir}" "${gm_profile_last}" "${gm_profile_first}" "${gm_operator}" "${makegm}")

OPTIND=1
while getopts ":F:ath" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}" ;;
        a) RUNPASHUA="Y" ;;
        t) RUNPASHUA="N" ;;
        h) _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; exit 1 ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
    esac
done

#_config_edit(){
#    [ -z "${1}" -o -z "${2}" ] && { _report -w "The config_edit function requires two arguments. Error." ; exit ;};
#    SEDTEMP=$(_maketemp)
#    sed "s:^${1}=[^ ]*:$1=$2:" "${GM_CONFIG_FILE}" > "${SEDTEMP}"
#    cp "${SEDTEMP}" "${GM_CONFIG_FILE}"
#}

#_add_key(){
#    KEY_TO_ADD="${1}"
#    grep -q "^${KEY_TO_ADD}=" "${GM_CONFIG_FILE}" ; GREP_CODE="$?"
#    if [[ ! "${GREP_CODE}" -eq "0" ]] ; then
#        _report -td "Adding NEW variable ${KEY_TO_ADD} to ${GM_CONFIG_FILE}"
#        echo "${KEY_TO_ADD}=" >> "${GM_CONFIG_FILE}"
#    fi
#}

## PASHUA INTERFACE

CONF="
# Set transparency: 0 is transparent, 1 is opaque
*.transparency=1.00
*.x = 250
*.y = 250

# Set window title
*.title = Great Migration config file

# intro text
intro.x = 20
intro.y = 620
intro.width = 500
intro.type = text
intro.text = Set up GMconfig variables

#gm_dir
gm_dir.x = 20
gm_dir.y = 570
gm_dir.type = openbrowser
gm_dir.label = Please navigate to and select the Great Migration directory to save to:
gm_dir.width = 600
gm_dir.default = /Volumes/ScanSAN/00_Great_Migration_SC_0001/2018

#gm_formats
gm_formats.text = Please choose the formats for this Great Migration appointment:
gm_formats.type = text
gm_formats.x = 20
gm_formats.y = 520

#gm_formats_35mm
gm_formats_35mm.x = 60
gm_formats_35mm.y = 500
gm_formats_35mm.type = checkbox
gm_formats_35mm.label = 35mm (35mm)
gm_formats_35mm.tooltip = If activated this creates a 35mm directory with ACCESS and PRESERVATION folders.
gm_formats_35mm.default = ${gm_formats_35mm}

#gm_formats_16mm
gm_formats_16mm.x = 60
gm_formats_16mm.y = 480
gm_formats_16mm.type = checkbox
gm_formats_16mm.label = 16mm (16mm)
gm_formats_16mm.tooltip = If activated this creates a 16mm directory with ACCESS and PRESERVATION folders.
gm_formats_16mm.default = ${gm_formats_16mm}

#gm_formats_R8
gm_formats_r8.x = 60
gm_formats_r8.y = 460
gm_formats_r8.type = checkbox
gm_formats_r8.label = Regular 8mm (R8)
gm_formats_r8.tooltip = If activated this creates a Regular8mm directory with ACCESS and PRESERVATION folders.
gm_formats_r8.default = ${gm_formats_r8}

#gm_formats_S8
gm_formats_s8.x = 60
gm_formats_s8.y = 440
gm_formats_s8.type = checkbox
gm_formats_s8.label = Super 8mm (S8)
gm_formats_s8.tooltip = If activated this creates a Super8mm directory with ACCESS and PRESERVATION folders.
gm_formats_s8.default = ${gm_formats_s8}

#gm_formats_VHS
gm_formats_vhs.x = 60
gm_formats_vhs.y = 420
gm_formats_vhs.type = checkbox
gm_formats_vhs.label = VHS (VHS)
gm_formats_vhs.tooltip = If activated this creates a VHS directory with ACCESS and PRESERVATION folders.
gm_formats_vhs.default = ${gm_formats_vhs}

#gm_formats_MiniDV
gm_formats_minidv.x = 60
gm_formats_minidv.y = 400
gm_formats_minidv.type = checkbox
gm_formats_minidv.label = MiniDV (MiniDV)
gm_formats_minidv.tooltip = If activated this creates a MiniDV directory with ACCESS and PRESERVATION folders.
gm_formats_minidv.default = ${gm_formats_minidv}

#gm_formats_Video8
gm_formats_v8.x = 60
gm_formats_v8.y = 380
gm_formats_v8.type = checkbox
gm_formats_v8.label = Video8 (V8)
gm_formats_v8.tooltip = If activated this creates a Video8 directory with ACCESS and PRESERVATION folders.
gm_formats_v8.default = ${gm_formats_v8}

#gm_formats_Hi8
gm_formats_hi8.x = 60
gm_formats_hi8.y = 360
gm_formats_hi8.type = checkbox
gm_formats_hi8.label = Hi8 (Hi8)
gm_formats_hi8.tooltip = If activated this creates a Hi8 directory with ACCESS and PRESERVATION folders.
gm_formats_hi8.default = ${gm_formats_hi8}

#gm_formats_Digital8
gm_formats_d8.x = 60
gm_formats_d8.y = 340
gm_formats_d8.type = checkbox
gm_formats_d8.label = Digital8 (D8)
gm_formats_d8.tooltip = If activated this creates a Digital8 directory with ACCESS and PRESERVATION folders.
gm_formats_d8.default = ${gm_formats_d8}

#gm_formats_U-matic
gm_formats_umatic.x = 60
gm_formats_umatic.y = 320
gm_formats_umatic.type = checkbox
gm_formats_umatic.label = U-matic
gm_formats_umatic.tooltip = If activated this creates a Umatic directory with ACCESS and PRESERVATION folders.
gm_formats_umatic.default = ${gm_formats_umatic}

#gm_formats_Betacam
gm_formats_beta.x = 60
gm_formats_beta.y = 300
gm_formats_beta.type = checkbox
gm_formats_beta.label = Betacam (Beta)
gm_formats_beta.tooltip = If activated this creates a Betacam directory with ACCESS and PRESERVATION folders.
gm_formats_beta.default = ${gm_formats_beta}

#gm_formats_BetacamSP
gm_formats_betasp.x = 60
gm_formats_betasp.y = 280
gm_formats_betasp.type = checkbox
gm_formats_betasp.label = BetacamSP (BetaSP)
gm_formats_betasp.tooltip = If activated this creates a BetacamSP directory with ACCESS and PRESERVATION folders.
gm_formats_betasp.default = ${gm_formats_betasp}

#gm_formats_Digital Betacam
gm_formats_digibeta.x = 60
gm_formats_digibeta.y = 260
gm_formats_digibeta.type = checkbox
gm_formats_digibeta.label = Digital Betacam (DigiBeta)
gm_formats_digibeta.tooltip = If activated this creates a DigiBeta directory with ACCESS and PRESERVATION folders.
gm_formats_digibeta.default = ${gm_formats_digibeta}

#gm_formats_OneInchVideo
gm_formats_oneinchvideo.x = 60
gm_formats_oneinchvideo.y = 240
gm_formats_oneinchvideo.type = checkbox
gm_formats_oneinchvideo.label = 1\" Video (TypeC)
gm_formats_oneinchvideo.tooltip = If activated this creates a OneInchVideo directory with ACCESS and PRESERVATION folders.
gm_formats_oneinchvideo.default = ${gm_formats_oneinchvideo}

#gm_formats_HalfInchVideo
gm_formats_halfinchvideo.x = 60
gm_formats_halfinchvideo.y = 220
gm_formats_halfinchvideo.type = checkbox
gm_formats_halfinchvideo.label = 1/2\" Open-Reel Video (EIAJ)
gm_formats_halfinchvideo.tooltip = If activated this creates a HalfInchVideo directory with ACCESS and PRESERVATION folders.
gm_formats_halfinchvideo.default = ${gm_formats_halfinchvideo}

#gm_formats_CompactAudioCassette
gm_formats_compactaudiocassette.x = 60
gm_formats_compactaudiocassette.y = 200
gm_formats_compactaudiocassette.type = checkbox
gm_formats_compactaudiocassette.label = Compact Audio Cassette (CAC)
gm_formats_compactaudiocassette.tooltip = If activated this creates a CompactAudioCassette directory with ACCESS and PRESERVATION folders.
gm_formats_compactaudiocassette.default = ${gm_formats_compactaudiocassette}

#gm_formats_QuarterInchOpenReelAudio
gm_formats_quarterinchopenreelaudio.x = 60
gm_formats_quarterinchopenreelaudio.y = 180
gm_formats_quarterinchopenreelaudio.type = checkbox
gm_formats_quarterinchopenreelaudio.label = 1/4\" Reel-To-Reel Audio (QinA)
gm_formats_quarterinchopenreelaudio.tooltip = If activated this creates a QuarterInchOpenReelAudio directory with ACCESS and PRESERVATION folders.
gm_formats_quarterinchopenreelaudio.default = ${gm_formats_quarterinchopenreelaudio}

#gm_profile_last
gm_profile_last.x = 20
gm_profile_last.y = 130
gm_profile_last.type = textfield
gm_profile_last.mandatory = true
gm_profile_last.label = Enter last name of Great Migration appointment:
gm_profile_last.width = 125
gm_profile_last.default = ${gm_profile_last}

#gm_profile_first
gm_profile_first.x = 20
gm_profile_first.y = 80
gm_profile_first.type = textfield
gm_profile_first.mandatory = true
gm_profile_first.label = Enter first name of Great Migration appointment:
gm_profile_first.width = 125
gm_profile_first.default = ${gm_profile_first}

#gm_operator
gm_operator.x = 20
gm_operator.y = 30
gm_operator.type = textfield
gm_operator.mandatory = true
gm_operator.label = Enter the name of the technician running the appointment:
gm_operator.width = 125
gm_operator.default = ${gm_operator}

# GM naming
gmnaming.x = 300
gmnaming.y = 450
gmnaming.width = 600
gmnaming.type = text
gmnaming.text = Great Migration file naming convention:[return][return][studyCollectionNumber]_[yyyymmdd]_[familyName]_[formatIdentifier]_[inventoryNumber][return][return]ex. SC_0001_20170412_Williams_MiniDV_01

# makeGM
makegm.x = 300
makegm.y = 350
makegm.type = radiobutton
makegm.label = Create ACCESS and PRESERVATION directories for each format selected?:
makegm.option = Yes
makegm.option = No
makegm.width = 75
makegm.default = Yes

# Add a cancel button with default label
cb.type=cancelbutton

";

# if a config file does not exist, create one using this GUI
if [[ "${RUNPASHUA}" = "Y" ]] ; then
    PASHUA_CONFIGFILE=$(/usr/bin/mktemp /tmp/pashua_XXXXXXXXX)
    echo "${CONF}" > "${PASHUA_CONFIGFILE}"
    _pashua_run
    rm "${PASHUA_CONFIGFILE}"
    if [ "${PASHUAFAIL}" = "Y" ] ; then
    	echo "Pashua is not installed. Exiting."
        #echo "Pashua is not installed.  Opening via CLI."
        #sleep 1
        #exec $(basename "${0}") -t
   		exit
    fi
    #write to the config file
    {
        echo "gm_dir=\"${gm_dir}\""
        echo "gm_formats_35mm=\"${gm_formats_35mm}\""
        echo "gm_formats_16mm=\"${gm_formats_16mm}\""
        echo "gm_formats_r8=\"${gm_formats_r8}\""
        echo "gm_formats_s8=\"${gm_formats_s8}\""
        echo "gm_formats_vhs=\"${gm_formats_vhs}\""
        echo "gm_formats_minidv=\"${gm_formats_minidv}\""
        echo "gm_formats_v8=\"${gm_formats_v8}\""
        echo "gm_formats_hi8=\"${gm_formats_hi8}\""
        echo "gm_formats_d8=\"${gm_formats_d8}\""
        echo "gm_formats_umatic=\"${gm_formats_umatic}\""
        echo "gm_formats_beta=\"${gm_formats_beta}\""
        echo "gm_formats_betasp=\"${gm_formats_betasp}\""
        echo "gm_formats_digibeta=\"${gm_formats_digibeta}\""
        echo "gm_formats_oneinchvideo=\"${gm_formats_oneinchvideo}\""
        echo "gm_formats_halfinchvideo=\"${gm_formats_halfinchvideo}\""
        echo "gm_formats_compactaudiocassette=\"${gm_formats_compactaudiocassette}\""
        echo "gm_formats_quarterinchopenreelaudio=\"${gm_formats_quarterinchopenreelaudio}\""
        echo "gm_profile_last=\"${gm_profile_last}\""
        echo "gm_profile_first=\"${gm_profile_first}\""
        echo "gm_operator=\"${gm_operator}\""
        echo "makegm=\"${makegm}\""

    } > "${GM_CONFIG_FILE}"
else
    # set up configuration file using the command line
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        _add_key "${KEY}"
    done

    echo

    _report -d "Table of existing variables:"
    for KEY in "${REQUIRED_VARIABLES[@]}" ; do
        VALUE=$(grep "^${KEY}=" "${GM_CONFIG_FILE}" | cut -d= -f2)
        printf '\t%-40s %-40s\n' "${KEY}" "${VALUE}"
    done
    while true ; do
        EDITOPTION1="Edit config file in nano"
        EDITOPTION2="Edit config file in TextMate"
        _report -q "Edit a variable? "
        PS3="Selection (enter by number)? "
        select CONFIG_KEY in "${EDITOPTION1}" "${EDITOPTION2}" "${REQUIRED_VARIABLES[@]}" "Quit" ; do
            break
        done
        [ "${CONFIG_KEY}" = "Quit" ] && { echo Goodbye. ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION1}" ] && { nano "${GM_CONFIG_FILE}" ; exit 1 ;};
        [ "${CONFIG_KEY}" = "${EDITOPTION2}" ] && { mate "${GM_CONFIG_FILE}" ; exit 1 ;};
        echo -n "Enter the value for ${CONFIG_KEY}: "
        read -e "CONFIG_VALUE"
        echo "${CONFIG_KEY} is now set to ${CONFIG_VALUE}"
        _config_edit "${CONFIG_KEY}" "${CONFIG_VALUE}"
    done
fi

# test whether requested output directory exists
if [[ ! -d "${gm_dir}" ]] ; then
    _report -w "${gm_dir} is not a valid directory. Exiting..."
    exit 1
    _log -a "Process terminated by script (no valid directory at requested location)."
fi

if [[ "$makegm" = "Yes" ]]; then
  cd /Users/medialab/gitHub/nmaahc/nmaahcmm
  ./makegm
fi
