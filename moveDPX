#!/usr/bin/env bash

# a script to copy .md5 checksum files and the first .dpx file in a stack to a designated directory

# load nmaahcmmfunctions into this script
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/nmaahcmmfunctions" || { echo "Missing '${SCRIPTDIR}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
_setcolors # assigns colors using a function defined in nmaahcmmfunctions
_initialize_make # safe script termination process defined in nmaahcmmfunctions

# (hardcoded) designated parent folder where the files will be moved
TARGET_FOLDER_PARENT="/Users/Annie/Dropbox/Annie/2019_fall/NMAAHC-test-files/dpx_dest"

## USAGE

_usage(){
    echo
    echo "$(basename "${0}")"
    echo "This application will copy .md5 checksum files and the first .dpx file in a stack to a designated directory. It takes one or more DPX directories as arguments."
    echo "The files will be sent to a subdirectory of ${TARGET_FOLDER_PARENT}"
    echo "Usage: $(basename ${0}) dpxdirectory1 [ dpxdirectory2 ...]"
    echo
    exit
}
[ "${#}" = 0 ] && _usage # if the command is run with no arguments then _usage is called
# getopts loop
OPTIND=1
while getopts ":h" OPT; do
    case "${OPT}" in
        h) _usage ;; # if the operator runs "[scriptname] -h" then the _usage text above will display in the terminal
        *) echo "Invalid option -${OPTARG}" ; _usage ;; # if the operator tries to use an option other than the ones listed above, the _usage text will display in the terminal
    esac
done
shift $(( ${OPTIND} - 1 ))

## FUNCTIONS

_moveDPX(){
    while [[ "${*}" != "" ]] ; do

        DPX_FOLDER="${1}"
        TARGET_FOLDER="${TARGET_FOLDER_PARENT}/${DPX_FOLDER##*/}"

        if [[ ! -d "${TARGET_FOLDER_PARENT}" ]] ; then 
            echo
            printf "${BIRED} %s%s does not exist. Exiting. ${COLOR_OFF}\n" "${TARGET_FOLDER_PARENT}" >&2 # tell operator if the hardcoded parent folder cannot be found - e.g. no longer exists or is moved
            exit
        fi

        if [[ ! -d "${TARGET_FOLDER}" ]] ; then
            echo
            printf "Creating target folder:\t%s%s%s\n" "${BIWHITE}" "${TARGET_FOLDER}" "${COLOR_OFF}"
            mkdir -p "${TARGET_FOLDER}"
        fi

        printf "${BIWHITE}Moving files to target folder...${COLOR_OFF}\n"
        
        for FILE in "${DPX_FOLDER}"/*DPX*/* ; do # for all files in a DPX subdirectory (expected to be named with the word "DPX" in it), do the following:
            if [[ -f "${TARGET_FOLDER}"/*.dpx ]] ; then # if .dpx file is found as expected, do:
                echo
                printf "%s%s%s exists, verifying checksum.\n" "${BIWHITE}" "${FILE##*/}" "${COLOR_OFF}"
                rsync -avPhic "${FILE}" "${TARGET_FOLDER}" # move file securely to the target folder. -a="archive," -v=verbose, -P=keep partially transferred files+show progress during transfer, -h=human-readable, -i=itemize changes, -c=with a built-in checksum check
                RSYNC_ERR_1="$?" # assign rsync output code to a variable
            else
                rsync -avPhi "${FILE}" "${TARGET_FOLDER}" # move file securely to the target folder (no checksum check)
                RSYNC_ERR_1="$?" # assign rsync output code to a variable
            fi
            printf "%srsync exit status is: %s%s\n" "${BIWHITE}" "${RSYNC_ERR_1}" "${COLOR_OFF}"

            if [[ "${RSYNC_ERR_1}" == 0 ]] ; then # if rsync output code indicated the rsync transfer was successful, tell operator
                echo
                printf "MOVED:\t%s%s%s\nTO DIRECTORY:\t%s%s%s\n" "${BIWHITE}" "${FILE##*/}" "${COLOR_OFF}" "${BIWHITE}" "${TARGET_FOLDER}" "${COLOR_OFF}"
                echo
            else
                printf "%sERRORS%s\n" "${BIRED}" "${COLOR_OFF}" >&2
            fi
            break 1
        done

        for MD5 in "${DPX_FOLDER}"/*.md5 ; do
            if [[ -f "${TARGET_FOLDER}"/*.md5 ]] ; then # if .md5 checksum file is found as expected, do:
                echo
                printf "%s%s%s exists, verifying checksum.\n" "${BIWHITE}" "${md5##*/}" "${COLOR_OFF}" # move file securely to the target folder (with built-in checksum check)
                rsync -avPhic "${MD5}" "${TARGET_FOLDER}"
                RSYNC_ERR_2="$?" # assign rsync output code to a variable
            else
                rsync -avPhi "${MD5}" "${TARGET_FOLDER}"  # move file securely to the target folder (no checksum check)
                RSYNC_ERR_2="$?" # assign rsync output code to a variable
            fi
                printf "%srsync exit status is: %s%s\n" "${BIWHITE}" "${RSYNC_ERR_2}" "${COLOR_OFF}"

            if [[ "${RSYNC_ERR_2}" == 0 ]] ; then # if rsync output code indicated the rsync transfer was successful, tell operator
                echo
                printf "MOVED:\t%s%s%s\nTO DIRECTORY:\t%s%s%s\n" "${BIWHITE}" "${md5##*/}" "${COLOR_OFF}" "${BIWHITE}" "${TARGET_FOLDER}" "${COLOR_OFF}"
                echo
            else
                printf "${BIRED}rsync transfer not completed successfully!${COLOR_OFF}\n" >&2
            fi
        done
        printf "Moving to next DPX directory if supplied...\n"
        echo
        shift

    done
    printf "%sChanged permissions on the following files in directory %s to 777:%s\n" "${BIWHITE}" "${TARGET_FOLDER_PARENT##*/}" "${COLOR_OFF}"
    chmod -vR 777 "${TARGET_FOLDER_PARENT}" # set permissions on the target parent directory (set above) to read-write-execute for all users. -v=verbose, -R=recursive
}

## SCRIPT ACTIONS

# log script beginning
_log -b
_moveDPX "${@}"
# log script ending
_log -e
printf "${BIWHITE}moveDPX process complete.${COLOR_OFF}\n"
exit "$?"
