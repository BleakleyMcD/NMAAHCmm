#!/usr/bin/env bash

#a script to create md5 checksums of all files in a directory or a single file and save it to a .md5 file

# load nmaahcmmfunctions into this script
SCRIPT_PATH=${0%/*}
. "${SCRIPT_PATH}/nmaahcmmfunctions"
[[ -f "${SCRIPT_PATH}/nmaahcmmfunctions" ]] || { echo "Missing '${SCRIPT_PATH}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
_setcolors # assigns colors using a function defined in nmaahcmmfunctions
_initialize_make # safe script termination process defined in nmaahcmmfunctions
unset DEPENDENCIES
DEPENDENCIES=(md5deep cowsay) # list dependencies required by script
_check_dependencies "${DEPENDENCIES[@]}" # defined in nmaahcmmfunctions

### USAGE

_usage(){
    echo
    echo "$(basename "${0}")"
    echo "This application creates md5 checksums. If you pass a single file as input, the application will create a checksum for that file and save it in a .md5 file. If you pass a directory as input, the application will create a checksum for every file in the directory and save them in .md5 files (one .md5 file for each original file)."
    echo "Usage: $(basename ${0}) fileorpackage1 fileorpackage2 [fileorpackage3...]"
    echo
    exit
}
[ "${#}" = 0 ] && _usage # if the command is run with no arguments then _usage is called
# getopts loop
OPTIND=1
while getopts ":h" OPT; do
    case "${OPT}" in
        h) _usage ;; # if the operator runs "[scriptname] -h" then the _usage text above will display in the terminal
        *) echo "Invalid option -${OPTARG}" ; _usage ;; # if the operator tries to use an option other than the ones listed above, the _usage text will display in the terminal
    esac
done
shift $(( ${OPTIND} - 1 ))

## FUNCTIONS

_makechecksum(){
    echo
    while [[ $# -gt 0 ]] ; do
        1
        INPUT="${1}" #name $INPUT as the first argument sent to script

        if [ -d "${INPUT}" ] ; then #if argument is a directory, run md5deep
            TARGET="${INPUT%/}" #strip the trailing /, if any
            TARGET="${TARGET##*/}" #drop the leading directory components i.e. get basename
            OUTPUT="${INPUT}/${TARGET}_${date}_checksums.md5" #set .md5 file as $OUTPUT
            printf "%s%s%s is a directory.\n" "${BIWHITE}" "${TARGET}" "${COLOR_OFF}"
            printf "Making checksums of all files in %s%s%s\n" "${BIWHITE}" "${TARGET}" "${COLOR_OFF}"
            printf "Writing to %s%s%s\n" "${BIWHITE}" "${OUTPUT}" "${COLOR_OFF}"
            md5deep -bre "${INPUT}" >> "${OUTPUT}" #create md5 hash (hashes) of $INPUT and write results to $OUTPUT. -b=strip leading directory info, -r=recursive, -e=display progress indicator
        fi

        if [ -f "${INPUT}" ] ; then #if argument is a file, run md5deep
            TARGET="${INPUT##*/}" #get basename of $INPUT
            TARGET="${TARGET%.*}" #strip extension from $TARGET
            OUTPUT="${INPUT%/*}" #get full path parent dirname of $INPUT
            OUTPUT="${OUTPUT}/${TARGET}_$(date +%F)_checksums.md5" #set .md5 file as $OUTPUT
            printf "%s%s%s is a file.\n" "${BIWHITE}" "${INPUT##*/}" "${COLOR_OFF}"
            printf "Making checksum of %s%s%s\n" "${BIWHITE}" "${INPUT##*/}" "${COLOR_OFF}"
            printf "Writing to %s%s%s\n" "${BIWHITE}" "${OUTPUT}" "${COLOR_OFF}"
            md5deep -bre "${INPUT}" >> "${OUTPUT}" #create md5 hash (hashes) of $INPUT and write results to $OUTPUT. -b=strip leading directory info, -r=recursive, -e=display progress indicator
        fi

        echo
        printf "Sorting %s%s%s\n" "${BIWHITE}" "${OUTPUT##*/}" "${COLOR_OFF}"
        sort -k 2 -o "${OUTPUT}" "${OUTPUT}" #sort $OUTPUT. -k 2=sort on the second field, -o=write OUTPUT to file (instead of standard terminal OUTPUT)
        shift
        echo
            if [[ $# -gt 0 ]] ; then
                printf "Finished making checksums for %s%s%s.\n\n<>..<> Moving to %s%s%s\n" "${BIWHITE}" "${INPUT##*/}" "${COLOR_OFF}" "${BIWHITE}" "${1##*/}" "${COLOR_OFF}"
                echo
            else
                printf "Finished making checksums for %s%s%s.\nNothing left to checksum.\n" "${BIWHITE}" "${INPUT##*/}" "${COLOR_OFF}"
                echo
                cowsay "Tootles!"
            fi

    done
}

## SCRIPT ACTIONS

# log script beginning
_log -b
_makechecksum "${@}"
# log script ending
_log -e
printf "${BIWHITE}makechecksum process complete.${COLOR_OFF}\n"
exit $?
