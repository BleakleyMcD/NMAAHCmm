#!/usr/bin/env bash

# a script to create a the desired directory structure and filenames for DPX packages received from VFS

# load nmaahcmmfunctions into this script
SCRIPT_PATH="${0%/*}"
. "${SCRIPT_PATH}/nmaahcmmfunctions"
[[ -f "${SCRIPT_PATH}/nmaahcmmfunctions" ]] || { echo "Missing '${SCRIPT_PATH}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
_setcolors # assigns colors using a function defined in nmaahcmmfunctions
_initialize_make # safe script termination process defined in nmaahcmmfunctions

### USAGE
_usage(){
    echo
    echo "$(basename "${0}")"
    echo "This application will create a the desired directory structure and filenames for DPX packages received from VFS."
    echo "The options below are optional; simply run '$(basename ${0})' if you would prefer to be prompted for each input."
    echo "Usage: $(basename ${0}) [ -d /path/to/deliver/to/ ] [ -i DPX_Object_ID ] [ -t DPX_Object_Title ] [ -r (number of reels) ] [ -c ] dpxpackage"
    echo "  -d directory (directory to deliver the resulting package to)"
    echo "  -i DPX_Object_ID (ex. 2012_79_1_54)"
    echo "  -t DPX_Object_Title (ex. Something_to_Build_On)"
    echo "  -r number (number of reels in the package, up to 3)"
    echo "  -c cleanup source files (remove all source files after script runs)"
    echo "  -h (display this help)"
    echo
    exit
}
# getopts loop
OPTIND=1
while getopts ":d:i:t:r:ch" OPT; do
    case "${OPT}" in
        d) DELIVERDIR="${OPTARG}" && _check_DELIVERDIR ;; # _check_DELIVERDIR defined in nmaahcmmfunctions
        i) DPXID="${OPTARG}" ;;
        t) TITLE="${OPTARG}" ;;
        r) REELNUMBER="${OPTARG}" ;;
        c) CLEANUPDECISION="Y" ;;
        h) _usage ;; # if the operator runs "[scriptname] -h" then the _usage text above will display in the terminal
        *) echo "Invalid option -${OPTARG}" ; _usage ;; # if the operator tries to use an option other than the ones listed above, the _usage text will display in the terminal
    esac
done
shift $(( ${OPTIND} - 1 ))

### FUNCTIONS
_restructureDPX(){
    INPUT="${1}"
    
    if [[ -z "${REELNUMBER}" ]] ; then
        _report -b "Please enter the number of reels your DPX package has:"
        read -r REELNUMBER
        echo
    fi
    if [[ -z "${DPXID}" ]] ; then
        _report -b "Please enter DPX_Object_ID_Number with underscores:"
        _report -b "ex. 2015_167_10_1"
        read -r DPXID
        echo
    fi
    if [[ -z "${TITLE}" ]] ; then
        _report -b "Please enter DPX_Object_Title with underscores:"
        _report -b "ex. Juke_Joint"
        read -r TITLE
        echo
    fi
    if [[ -z "${DELIVERDIR}" ]] ; then
        _report -b "Please drag in the full path to the destination (where the new directory should be created):"
        read -r DELIVERDIR
        echo
    fi
    if [[ -z "${INPUT}" ]] ; then
        _report -b "Please drag in the full path to the input directory:"
        read -r INPUT
        echo
    fi
    MEDIAID="${DPXID}__${TITLE}"
    OUTPUTDIR="${DELIVERDIR}/${MEDIAID}"
    mkdir "${OUTPUTDIR}"
    
    # record variables in ingest log
    _writelog "DPX ID" "${DPXID}"
    _writelog "TITLE" "${TITLE}"
    _writelog "MEDIAID" "${MEDIAID}"
    _writelog "REELS" "${REELNUMBER}"
    _writelog "INPUT" "${INPUT}"
    _writelog "START TIME" "$(date +%FT%T)"

    case "${REELNUMBER}" in
        1 )
            _report -g "Moving files from ${INPUT}"
            if [[ -d "${OUTPUTDIR}" ]] ; then
                # remove any .DS_Store files to begin
                "${SCRIPTDIR}/removeDSStore" "${OUTPUTDIR}"
                # find and move any .wav files fom $INPUT to $OUTPUTDIR
                for WAVPATH in "${INPUT}"/*WAV ; do
                    if [[ ! -d "${WAVPATH}" ]]; then
                        _report -rt "No .wav directory found."
                    else
                        while [[ -d "${WAVPATH}" ]] ; do
                            AUDPATH=("${OUTPUTDIR}/${DPXID}__${TITLE}__Audio") &&
                            _report -g "Found .wav directory ${WAVPATH}. Renaming to: ${AUDPATH}" &&
                            mv -i "${WAVPATH}" "${AUDPATH}"
                        done
                    fi
                done
                # find and move and .mov files from $INPUT to $OUTPUTDIR
                for MOVPATH in "${INPUT}"/*MOV ; do
                    if [[ ! -d "${MOVPATH}" ]] ; then
                        _report -rt "No .mov directory found."
                    else
                        while [[ -d "${MOVPATH}" ]] ; do
                            DER=("${OUTPUTDIR}/${DPXID}__${TITLE}__Derivatives") &&
                            _report -g "Found .mov directory ${MOVPATH}. Renaming to: ${DER}" &&
                            mv -i "${MOVPATH}" "${DER}"
                        done
                    fi
                done
                # move DPX directory from $input to $OUTPUTDIR and rename
                for DPXPATH in "${INPUT}"/*DPX ; do
                    if [[ ! -d "${DPXPATH}" ]] ; then
                        _report -rt "No DPX directory found."
                    else
                        while [[ -d "${DPXPATH}" ]] ; do
                            DPX=("${OUTPUTDIR}/${DPXID}__${TITLE}__DPX") &&
                            _report -g "Found DPX directory ${DPXPATH}. Renaming to: ${DPX}" &&
                            mv -i "${DPXPATH}" "${DPX}"
                        done
                    fi
                done
            else
                _report -rt "ERROR: ${OUTPUTDIR} does not exist. Exiting..."
                _log -a "Process terminated by script (no directory at requested location)."
                exit 1
            fi
            # find the .wav and .mov files and rename them according to NMAAHC naming structures. Finds files based on filenaming + extension; assumes each file will have descriptive filename + lowercase extension.
            _report -g "Renaming files in ${OUTPUTDIR}"
            echo
            if [[ -d "${AUDPATH}" ]] ; then
                find "${AUDPATH}" -iname "*.wav" -exec mv -i "{}" "${AUDPATH}/${DPXID}_AUD.wav" \;
                WAV="${AUDPATH}/${DPXID}_AUD.wav"
                _report -g "Renamed audio file to ${WAV}"
            fi
            if [[ -d "${DER}" ]] ; then
                find "${DER}" -iname "*ProRes*.mov" -exec mv -i "{}" "${DER}/${DPXID}_DER_01.mov" \;
                DER1="${DER}/${DPXID}_DER_01.mov"
                _report -g "Renamed ProRes file to ${DER1}"
                fi
            if [[ -d "${DER}" ]] ; then
                find "${DER}" -iname "*Uncompressed.mov" -exec mv -i "{}" "${DER}/${DPXID}_DER_02.mov" \;
                DER2="${DER}/${DPXID}_DER_02.mov"
                _report -g "Renamed uncompressed file to ${DER2}"
                echo
            fi
            ;;

        2 )
            # make separate subdirectories for R1 and R2, with further subdirectories for the different components
            R1=("${OUTPUTDIR}/${MEDIAID}_R1")
            AUD_R1="${R1}/${MEDIAID}_R1__Audio"
            DER_R1="${R1}/${MEDIAID}_R1__Derivatives"
            DPXR1="${R1}/${MEDIAID}_R1__DPX"
            R2=("${OUTPUTDIR}/${MEDIAID}_R2")
            AUD_R2="${R2}/${MEDIAID}_R2__Audio"
            DER_R2="${R2}/${MEDIAID}_R2__Derivatives"
            DPXR2="${R2}/${MEDIAID}_R2__DPX"
        
            mkdir -p "${R1}" "${AUD_R1}" "${DER_R1}" "${DPXR1}" "${R2}" "${AUD_R2}" "${DER_R2}" "${DPXR2}"
        
            echo
            _report -g "Moving files from ${INPUT}"

            # find and move audio, derivatives, and DPX files for each reel in turn. Finds files based on filenaming + extension; assumes each file will have reel # in filename + lowercase extension.
            if [[ -d "${AUD_R1}" ]] ; then
                find "${INPUT}" -iname "*R1*.wav" -exec rsync -av {} "${AUD_R1}" \;
            else
                _report -rt "Missing ${AUD_R1}"
                exit 1
            fi
            if [[ -d "${DER_R1}" ]] ; then
                find "${INPUT}" -iname "*R1*.mov" -exec rsync -av {} "${DER_R1}" \;
            else
                _report -rt "Missing ${DER_R1}"
                exit 1
            fi
            if [[ -d "${DPXR1}" ]] ; then
                find "${INPUT}" -iname "*R1*.dpx" -exec rsync -av {} "${DPXR1}" \;
            else
                _report -rt "Missing ${DPXR1}"
                exit 1
            fi

            if [[ -d "${AUD_R2}" ]] ; then
                find "${INPUT}" -iname "*R2*.wav" -exec rsync -av {} "${AUD_R2}" \;
            else
                _report -rt "Missing ${AUD_R2}"
                exit 1
            fi
            if [[ -d "${DER_R2}" ]] ; then
                find "${INPUT}" -iname "*R2*.mov" -exec rsync -av {} "${DER_R2}" \;
            else
                _report -rt "Missing ${DER_R2}"
                exit 1
            fi
            if [[ -d "${DPXR2}" ]] ; then
                find "${INPUT}" -iname "*R2*.dpx" -exec rsync -av {} "${DPXR2}" \;
            else
                _report -rt "Missing ${DPXR2}"
                exit 1
            fi

            echo
            # rename files according to NMAAHC filenaming guidelines
            _report -g "Renaming files in ${OUTPUTDIR}"
            find "${AUD_R1}" -iname "*R1*.wav" -exec mv -vi {} "${AUD_R1}/${DPXID}_R1_AUD.wav" \;
            find "${DER_R1}" -iname "*R1*ProRes*.mov" -exec mv -vi {} "${DER_R1}/${DPXID}_R1_DER_01.mov" \;
            find "${DER_R1}" -iname "*R1*Uncompressed*.mov" -exec mv -vi {} "${DER_R1}/${DPXID}_R1_DER_02.mov" \;
            find "${AUD_R2}" -iname "*R2*.wav" -exec mv -vi {} "${AUD_R2}/${DPXID}_R2_AUD.wav" \;
            find "${DER_R2}" -iname "*R2*ProRes*.mov" -exec mv -vi {} "${DER_R2}/${DPXID}_R2_DER_01.mov" \;
            find "${DER_R2}" -iname "*R2*Uncompressed*.mov" -exec mv -vi {} "${DER_R2}/${DPXID}_R2_DER_02.mov" \;
            ;;

        3 )
            # make separate subdirectories for R1, R2, and R3, with further subdirectories for the different components
            R1=("${OUTPUTDIR}/${MEDIAID}_R1")
            AUD_R1="${R1}/${MEDIAID}_R1__Audio"
            DER_R1="${R1}/${MEDIAID}_R1__Derivatives"
            DPXR1="${R1}/${MEDIAID}_R1__DPX"
            R2=("${OUTPUTDIR}/${MEDIAID}_R2")
            AUD_R2="${R2}/${MEDIAID}_R2__Audio"
            DER_R2="${R2}/${MEDIAID}_R2__Derivatives"
            DPXR2="${R2}/${MEDIAID}_R2__DPX"
            R3=("${OUTPUTDIR}/${MEDIAID}_R3")
            AUD_R3="${R3}/${MEDIAID}_R3__Audio"
            DER_R3="${R3}/${MEDIAID}_R3__Derivatives"
            DPXR3="${R3}/${MEDIAID}_R3__DPX"
            mkdir -p "${R1}" "${AUD_R1}" "${DER_R1}" "${DPXR1}" "${R2}" "${AUD_R2}" "${DER_R2}" "${DPXR2}" "${R3}" "${AUD_R3}" "${DER_R3}" "${DPXR3}"
            echo
            _report -g "Moving files from ${INPUT}"

            # find and move audio, derivatives, and DPX files for each reel in turn. Finds files based on filenaming + extension; assumes each file will have reel # in filename + lowercase extension.
            if [[ -d "${AUD_R1}" ]] ; then
                find "${INPUT}" -iname "*R1*.wav" -exec rsync -av {} "${AUD_R1}" \;
            else
                _report -rt "Missing ${AUD_R1}"
                exit 1
            fi
            if [[ -d "${DER_R1}" ]] ; then
                find "${INPUT}" -iname "*R1*.mov" -exec rsync -av {} "${DER_R1}" \;
            else
                _report -rt "Missing ${DER_R1}"
                exit 1
            fi
            if [[ -d "${DPXR1}" ]] ; then
                find "${INPUT}" -iname "*R1*.dpx" -exec rsync -av {} "${DPXR1}" \;
            else
                _report -rt "Missing ${DPXR1}"
                exit 1
            fi

            if [[ -d "${AUD_R2}" ]] ; then
                find "${INPUT}" -iname "*R2*.wav" -exec rsync -av {} "${AUD_R2}" \;
            else
                _report -rt "Missing ${AUD_R2}"
                exit 1
            fi
            if [[ -d "${DER_R2}" ]] ; then
                find "${INPUT}" -iname "*R2*.mov" -exec rsync -av {} "${DER_R2}" \;
            else
                _report -rt "Missing ${DER_R2}"
                exit 1
            fi
            if [[ -d "${DPXR2}" ]] ; then
                find "${INPUT}" -iname "*R2*.dpx" -exec rsync -av {} "${DPXR2}" \;
            else
                _report -rt "Missing ${DPXR2}"
                exit 1
            fi

            if [[ -d "${AUD_R3}" ]] ; then
                find "${INPUT}" -iname "*R3*.wav" -exec rsync -av {} "${AUD_R3}" \;
            else
                _report -rt "Missing ${AUD_R3}"
                exit 1
            fi
            if [[ -d "${DER_R3}" ]] ; then
                find "${INPUT}" -iname "*R3*.mov" -exec rsync -av {} "${DER_R3}" \;
            else
                _report -rt "Missing ${DER_R3}"
                exit 1
            fi
            if [[ -d "${DPXR3}" ]] ; then
                find "${INPUT}" -iname "*R3*.dpx" -exec rsync -av {} "${DPXR3}" \;
            else
                _report -rt "Missing ${DPXR3}"
                exit 1
            fi
            echo
            # rename files according to NMAAHC filenaming guidelines
            _report -g "Renaming files in ${OUTPUTDIR}"
            find "${AUD_R1}" -iname "*R1*.wav" -exec mv -vi {} "${AUD_R1}/${DPXID}_R1_AUD.wav" \;
            find "${DER_R1}" -iname "*R1*ProRes*.mov" -exec mv -vi {} "${DER_R1}/${DPXID}_R1_DER_01.mov" \;
            find "${DER_R1}" -iname "*R1*Uncompressed*.mov" -exec mv -vi {} "${DER_R1}/${DPXID}_R1_DER_02.mov" \;
            find "${AUD_R2}" -iname "*R2*.wav" -exec mv -vi {} "${AUD_R2}/${DPXID}_R2_AUD.wav" \;
            find "${DER_R2}" -iname "*R2*ProRes*.mov" -exec mv -vi {} "${DER_R2}/${DPXID}_R2_DER_01.mov" \;
            find "${DER_R2}" -iname "*R2*Uncompressed*.mov" -exec mv -vi {} "${DER_R2}/${DPXID}_R2_DER_02.mov" \;
            find "${AUD_R3}" -iname "*R3*.wav" -exec mv -vi {} "${AUD_R3}/${DPXID}_R3_AUD.wav" \;
            find "${DER_R3}" -iname "*R3*ProRes*.mov" -exec mv -vi {} "${DER_R3}/${DPXID}_R3_DER_01.mov" \;
            find "${DER_R3}" -iname "*R3*Uncompressed*.mov" -exec mv -vi {} "${DER_R3}/${DPXID}_R3_DER_02.mov" \;
            ;;

            *   )
            _report -rt "ERROR. Presently, this script can only handle DPX packages of 1 or 2 or 3 reels. Check back later."
            _log -w "Attempt to run restructureDPX with >3 reels in package."
            echo
            cowsay "SORRY!"
            ;;
    esac
}

## SCRIPT ACTIONS

# log script beginning
_log -b
_restructureDPX "${@}"
if [[ -z "${CLEANUPDECISION}" ]] ; then
    _report -b "Remove input directory? Type Y or y for yes, any other key for no: "
    read CLEANUPDECISION
fi
if [[ "${CLEANUPDECISION}" == "Y" ]] || [[ "${CLEANUPDECISION}" == "y" ]] ; then
    rm -vr "${INPUT}" # remove input directory. -v=verbose, -r=recursive
fi
# log script ending
_log -e
_writelog "END TIME" "$(date +%FT%T)"
_report -g "restructureDPX process complete."
exit $?
