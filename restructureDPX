#!/usr/bin/env bash

#a script to create a the desired directory structure and filenames for DPX packages received from VFS

### CONSTANTS

biwhite='\e[1;97m'
bired='\e[1;91m'
color_off='\e[0m'

### FUNCTIONS

restructureDPX ()

{
printf "%sPlease enter the number of reels your DPX package has: %s" "$biwhite" "$color_off"

read -r reelnumber
echo
printf '%sPlease enter DPX Object ID Number with underscores:\n' "$biwhite"
printf 'ex. 2015_167_10_1\n%s' "$color_off"
read -r dpxid
echo
printf '%sPlease enter DPX Object title with underscores:\n' "$biwhite"
printf 'ex. Juke_Joint\n%s' "$color_off"
read -r title
echo
printf '%sPlease enter destination for directory tree to be created:\n%s' "$biwhite" "$color_off"
read -r dest
echo
printf '%sPlease enter directory to be worked with:\n%s' "$biwhite" "$color_off"
read -r input

case "$reelnumber" in
	1 )
	destination=("$dest"/"$dpxid"__"$title")
	mkdir "$dest"/"$dpxid"__"$title"

	mkdir "$destination"/"$dpxid"__"$title"

	aud=("$destination"/"$dpxid"__"$title"/"$dpxid"__"$title"_Audio)
	mkdir "$destination"/"$dpxid"__"$title"/"$dpxid"__"$title"_Audio

	der=("$destination"/"$dpxid"__"$title"/"$dpxid"__"$title"_Derivatives)
	mkdir "$destination"/"$dpxid"__"$title"/"$dpxid"__"$title"_Derivatives

	dpx=("$destination"/"$dpxid"__"$title"/"$dpxid"__"$title"_DPX)
	mkdir "$destination"/"$dpxid"__"$title"/"$dpxid"__"$title"_DPX

	echo
	printf "%sMoving files from %s" "$biwhite" "$color_off" "$input"

	find "$input" -name "*.wav" -exec mv -vi {} "$aud" \;
	find "$input" -name "*.mov" -exec mv -vi {} "$der" \;
	find "$input" -name "*.dpx" -exec mv -vi {} "$dpx" \;

	echo
	printf "%sRemoving %s$input\n" "$biwhite" "$color_off"
	rm -vri "$input"

	if [ -d "$aud" ] ; then
		find "$input" -name "*.wav" -exec mv -vi {} "$aud" \;
	else
		echo "Missing $aud"
		exit 1
	fi
	if [ -d "$der" ] ; then
		find "$input" -name "*.mov" -exec mv -vi {} "$der" \;
	else
		echo "Missing $der"
		exit 1
	fi
	if [ -d "$dpx"] ; then
		find "$input" -name "*.dpx" -exec mv -vi {} "$dpx" \;
	else
		echo "Missing $dpx"
		exit 1
	fi
	;;

	2 )
	destination=("$dest"/"$dpxid"__"$title")
	mkdir "$dest"/"$dpxid"__"$title"

	mkdir "$destination"/"$dpxid"__"$title"_R1

	audR1=("$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Audio)
	mkdir "$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Audio

	derR1=("$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Derivatives)
	mkdir "$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Derivatives

	derR1=("$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_DPX)
	mkdir "$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_DPX

	mkdir "$destination"/"$dpxid"__"$title"_R2

	audR2=("$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Audio)
	mkdir "$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Audio

	derR2=("$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Derivatives)
	mkdir "$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Derivatives

	dpxR2=("$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_DPX)
	mkdir "$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_DPX

	echo
	printf "%sMoving files from%s $input" "$biwhite" "$color_off"

	if [ -d "$audR1" ] ; then
		find "$input" -name "*R1*.wav" -exec mv -vi {} "$audR1" \;
	else
		echo "Missing $audR1"
		exit 1
	fi
	if [ -d "$derR1" ] ; then
		find "$input" -name "*R1*.mov" -exec mv -vi {} "$derR1" \;
	else
		echo "Missing $derR1"
		exit 1
	fi
	if [ -d "$dpxR1"] ; then
		find "$input" -name "*R1*.dpx" -exec mv -vi {} "$dpxR1" \;
	else
		echo "Missing $dpxR1"
		exit 1
	fi


	if [ -d "$audR2" ] ; then
		find "$input" -name "*R2*.wav" -exec mv -vi {} "$audR2" \;
	else
		echo "Missing $audR2"
		exit 1
	fi
	if [ -d "$derR2" ] ; then
		find "$input" -name "*R2*.mov" -exec mv -vi {} "$derR2" \;
	else
		echo "Missing $derR2"
		exit 1
	fi
	if [ -d "$dpxR2"] ; then
		find "$input" -name "*R2*.dpx" -exec mv -vi {} "$dpxR2" \;
	else
		echo "Missing $dpxR2"
		exit 1
	fi

	echo
	printf "%sRemoving $input\n" "$biwhite" "$color_off"
	rm -vri "$input"

	find "$destination" -name "*R1*.wav" -exec mv -vi {} "$audR1"/"$dpxid"_R1_AUD.wav \;
	find "$destination" -name "*R1*ProResHQ*.mov" -exec mv -vi {} "$derR1"/"$dpxid"_R1_DER_01.mov \;
	find "$destination" -name "*R1*Uncompressed*.mov" -exec mv -vi {} "$derR1"/"$dpxid"_R1_DER_02.mov \;
	find "$destination" -name "*R2*.wav" -exec mv -vi {} "$audR2"/"$dpxid"_R2_AUD.wav \;
	find "$destination" -name "*R2*ProResHQ*.mov" -exec mv -vi {} "$derR2"/"$dpxid"_R2_DER_01.mov \;
	find "$destination" -name "*R2*Uncompressed*.mov" -exec mv -vi {} "$derR2"/"$dpxid"_R2_DER_02.mov \;
	;;

	3 )
	destination=("$dest"/"$dpxid"__"$title")
	mkdir "$dest"/"$dpxid"__"$title"

	mkdir "$destination"/"$dpxid"__"$title"_R1

	audR1=("$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Audio)
	mkdir "$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Audio

	derR1=("$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Derivatives)
	mkdir "$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_Derivatives

	dpxR1=("$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_DPX)
	mkdir "$destination"/"$dpxid"__"$title"_R1/"$dpxid"__"$title"_R1_DPX

	mkdir "$destination"/"$dpxid"__"$title"_R2

	audR2=("$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Audio)
	mkdir "$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Audio

	derR2=("$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Derivatives)
	mkdir "$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_Derivatives

	dpxR2=("$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_DPX)
	mkdir "$destination"/"$dpxid"__"$title"_R2/"$dpxid"__"$title"_R2_DPX

	mkdir "$destination"/"$dpxid"__"$title"_R3

	audR3=("$destination"/"$dpxid"__"$title"_R3/"$dpxid"__"$title"_R3_Audio)
	mkdir "$destination"/"$dpxid"__"$title"_R3/"$dpxid"__"$title"_R3_Audio

	derR3=("$destination"/"$dpxid"__"$title"_R3/"$dpxid"__"$title"_R3_Audio_Derivatives)
	mkdir "$destination"/"$dpxid"__"$title"_R3/"$dpxid"__"$title"_R3_Derivatives

	dpxR3=("$destination"/"$dpxid"__"$title"_R3/"$dpxid"__"$title"_R3_DPX)
	mkdir "$destination"/"$dpxid"__"$title"_R3/"$dpxid"__"$title"_R3_DPX

	echo
	printf "%sMoving files from%s $input" "$biwhite" "$color_off"

	if [ -d "$audR1" ] ; then
		find "$input" -name "*R1*.wav" -exec mv -vi {} "$audR1" \;
	else
		echo "Missing $audR1"
		exit 1
	fi
	if [ -d "$derR1" ] ; then
		find "$input" -name "*R1*.mov" -exec mv -vi {} "$derR1" \;
	else
		echo "Missing $derR1"
		exit 1
	fi
	if [ -d "$dpxR1"] ; then
		find "$input" -name "*R1*.dpx" -exec mv -vi {} "$dpxR1" \;
	else
		echo "Missing $dpxR1"
		exit 1
	fi


	if [ -d "$audR2" ] ; then
		find "$input" -name "*R2*.wav" -exec mv -vi {} "$audR2" \;
	else
		echo "Missing $audR2"
		exit 1
	fi
	if [ -d "$derR2" ] ; then
		find "$input" -name "*R2*.mov" -exec mv -vi {} "$derR2" \;
	else
		echo "Missing $derR2"
		exit 1
	fi
	if [ -d "$dpxR2"] ; then
		find "$input" -name "*R2*.dpx" -exec mv -vi {} "$dpxR2" \;
	else
		echo "Missing $dpxR2"
		exit 1
	fi

	if [ -d "$audR3" ] ; then
		find "$input" -name "*R3*.wav" -exec mv -vi {} "$audR3" \;
	else
		echo "Missing $audR3"
		exit 1
	fi
	if [ -d "$derR3" ] ; then
		find "$input" -name "*R3*.mov" -exec mv -vi {} "$derR3" \;
	else
		echo "Missing $derR3"
		exit 1
	fi
	if [ -d "$dpxR3"] ; then
		find "$input" -name "*R3*.dpx" -exec mv -vi {} "$dpxR3" \;
	else
		echo "Missing $dpxR3"
		exit 1
	fi

	echo
	printf "%sRemoving $input\n" "$biwhite" "$color_off"
	rm -vri "$input"

	find "$destination" -name "*R1*.wav" -exec mv -vi {} "$audR1"/"$dpxid"_R1_AUD.wav \;
	find "$destination" -name "*R1*ProResHQ*.mov" -exec mv -vi {} "$derR1"/"$dpxid"_R1_DER_01.mov \;
	find "$destination" -name "*R1*Uncompressed*.mov" -exec mv -vi {} "$derR1"/"$dpxid"_R1_DER_02.mov \;
	find "$destination" -name "*R2*.wav" -exec mv -vi {} "$audR2"/"$dpxid"_R2_AUD.wav \;
	find "$destination" -name "*R2*ProResHQ*.mov" -exec mv -vi {} "$derR2"/"$dpxid"_R2_DER_01.mov \;
	find "$destination" -name "*R2*Uncompressed*.mov" -exec mv -vi {} "$derR2"/"$dpxid"_R2_DER_02.mov \;
	find "$destination" -name "*R3*.wav" -exec mv -vi {} "$audR3"/"$dpxid"_R3_AUD.wav \;
	find "$destination" -name "*R3*ProResHQ*.mov" -exec mv -vi {} "$derR3"/"$dpxid"_R3_DER_01.mov \;
	find "$destination" -name "*R3*Uncompressed*.mov" -exec mv -vi {} "$derR3"/"$dpxid"_R3_DER_02.mov \;
	;;

	*	)
	printf '%sERROR. Presently, this script can only handle DPX packages of 1 or 2 or 3 reels. Check back later.' "$bired"
	echo
	cowsay 'SORRY!'
	;;
esac
}

#call the function(s)

restructureDPX "$@"

exit $?
