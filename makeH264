#!/usr/bin/env bash

# a script to create a H264 derivative of a given input. Make access happen!
# all comments refer to line(s) above unless placed in-line with code or specified otherwise

# load nmaahcmmfunctions into this script
script_path=${0%/*}
. "${script_path}/nmaahcmmfunctions"
[[ -f "${script_path}/nmaahcmmfunctions" ]] || { echo "Missing '${script_path}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
_setcolors # assigns colors using a function defined in nmaahcmmfunctions
_initialize_make # safe script termination process defined in nmaahcmmfunctions

relativepath="derivative"
suffix="" #suffix is blank here but can be filled in with desired characters for inlcusion in filename
extension="mp4"
crfvalue=18
presetspeed=medium
maxrate=8000
errors=0

## USAGE

usage(){
    echo
    echo "$(basename "${0}")"
    echo "This application will create a high quality h264 file (suitable for uploading to YouTube). It takes one or more video files or packages as input. You may pass both video files and packages in the same command."
    echo "FOR VIDEO FILES: The script will create derivatives for all video files (regardless of extension) that are passed as input. Each derivative will be named after its input file. Derivatives will be created in a subdirectory called 'derivative' located within the input file's parent directory."
    echo "FOR PACKAGES: The script will create derivatives for all .mov and .mkv files within the input package. Each derivative will be named after its corresponding .mov or .mkv file. Derivatives will be created in a subdirectory called 'derivative' located within the input directory."
    echo "Usage: $(basename ${0}) fileorpackage1 [ fileorpackage2 ...]"
    echo
    exit
}
[ "${#}" = 0 ] && usage # if the command is run with no arguments then usage is called
# getopts loop
OPTIND=1
while getopts ":h" OPT; do
    case "${OPT}" in
        h) usage ;;  # if the operator runs "[scriptname] -h" then the usage text above will display in the terminal
        *) echo "Invalid option -${OPTARG}" ; usage ;; # if the operator tries to use an option other than the ones listed above, the usage text will display in the terminal
    esac
done
shift $(( ${OPTIND} - 1 ))

## SCRIPT ACTIONS

# log script beginning
_log -b

while [ "${*}" != "" ] ; do
    input="${1}" #set $input as the first argument sent to script

    # process if input is a file
    if [[ -f "${input}" ]] ; then
        output_dir="$(dirname ${input})/${relativepath}" # set output_dir to input name with extension stripped plus relativepath
        MEDIAID="${input##*/}" #set $MEDIAID to basename of $input
        MEDIAID="${MEDIAID%.*}" #set $MEDIAID to $MEDIAID with extension stripped
        output="${output_dir}/${MEDIAID%.*}${suffix}.${extension}" #set $output
        [[ ! -d "${output_dir}" ]] && mkdir -p "${output_dir}" # make output directory if it doesn't already exist
        if [[ -s "${output}" ]] ; then #check to see if $output exists
            printf "%sWARNING ${output} already exists, skipping transcode of %s.%s%s\n" "${bired}" "${input}" "${color_off}" "${biwhite}"
            printf "Moving to next file if present...\n${color_off}"
        else
            printf "%sMEDIAID is: %s%s\n" "${color_off}" "${biwhite}" "${MEDIAID}"
            printf "%sThe output directory is: %s%s\n" "${color_off}" "${biwhite}" "${output_dir}"
            printf "%soutput is: %s%s\n" "${color_off}" "${biwhite}" "${output}"
            printf "\n%smaking .mp4 derivative of %s%s%s\n" "${color_off}" "${biwhite}" "${MEDIAID}" "${color_off}" 
            ffmpeg -n -vsync 0 -nostdin -v info -hide_banner -stats -i "${input}" -movflags faststart -map 0:v -map 0:a -c:v libx264 -vf "yadif=1,format=yuv420p" -crf "${crfvalue}" -preset "${presetspeed}" -maxrate "${maxrate}"k -bufsize 1835k -c:a aac -strict -2 -b:a 384k -f mp4 "${output}"
            if [[ -s "${output}" ]] ; then
                printf "\nSuccess! Derivative ${biwhite}$(basename ${output})${color_off} created.\n\n"
            else
                printf "\n${bired}Hmm...derivative $(basename ${output}) not successfully created.\n\n${color_off}"
                ((errors++))
            fi
            printf "Moving to next file if present...\n${color_off}"
        fi
    # process if input is a directory
    elif [[ -d "${input}" ]] ; then
        input="${input%/}" # strip trailing / if any
        output_dir="${input}/${relativepath}" # set output_dir to input name plus relativepath
        shopt -s nullglob # setting the nullglob option tells the for loop in the next line to skip the rest of the commands if it doesn't find any .mov and/or .mkv files (rather than try to execute on the literal string "*.mov" or "*.mkv")
        for file in "${input}"/*.{mov,mkv} ; do # find .mov and .mkv files within the directory and run the ffmpeg command on that file
            [[ ! -d "${output_dir}" ]] && mkdir -p "${output_dir}" # make output directory if it doesn't already exist
            MEDIAID="${file##*/}" #set $MEDIAID to basename of $input
            MEDIAID="${MEDIAID%.*}" #set $MEDIAID to $MEDIAID with extension stripped
            output="${output_dir}/${MEDIAID%.*}${suffix}.${extension}" #set $output
            if [[ -s "${output}" ]] ; then #check to see if $output exists
                printf "%sWARNING ${output} already exists, skipping transcode of %s.%s%s\n" "${bired}" "${input}" "${color_off}" "${biwhite}"
            else
                printf "%sMEDIAID is: %s%s\n" "${color_off}" "${biwhite}" "${MEDIAID}"
                printf "%sThe output directory is: %s%s\n" "${color_off}" "${biwhite}" "${output_dir}"
                printf "%soutput is: %s%s\n" "${color_off}" "${biwhite}" "${output}"
                printf "\n%smaking .mp4 derivative of %s%s%s\n" "${color_off}" "${biwhite}" "${MEDIAID}" "${color_off}" 
                ffmpeg -n -vsync 0 -nostdin -v info -hide_banner -stats -i "${file}" -movflags faststart -pix_fmt yuv420p -map 0:v -map 0:a -c:v libx264 -vf "yadif=1,format=yuv420p" -crf "${crfvalue}" -preset "${presetspeed}" -maxrate "${maxrate}"k -bufsize 1835k -c:a aac -strict -2 -b:a 384k -f mp4 "${output}"
                if [[ -s "${output}" ]] ; then
                    printf "\nSuccess! Derivative ${biwhite}$(basename ${output})${color_off} created.\n\n"
                else
                    printf "\n${bired}Hmm...derivative $(basename ${output}) not successfully created.\n\n${color_off}"
                    ((errors++))
                fi
            fi
            printf "Moving to next file if present...\n${color_off}"
        done
    else
        printf "${bired}Input is not a file or directory. Exiting script..."
        exit 1
    fi
    shift
done

# log script ending
_log -e
printf "${biwhite}makeH264 process complete.\n${color_off}"
if [[ "${errors}" -gt 0 ]] ; then
    printf "\n${bired}Not all derivatives were successfully created. Please double-check the terminal output!\n"
    printf "Number of derivative errors found: ${errors}\n${color_off}"
    _log -w "${errors} error/s occurred during derivative creation."
fi
exit "$?"
